Version 0.60
     Cron:
      * Added version check: Bitflu checks if your version is up-to-date and sends you
        a note (via 'notify') if it isn't.
        > Note: This 'phone home' check does NOT transmit any personal data
               or/and replace any files itself!
               The check just lookups the A-Record of 'version.bitflu.workaround.ch'
        > You can set 'checkversion = 0' in .bitflu.config to DISABLE this feature.
          (default is: enabled)
        > Implementation details:
         - Bitflu does an A-Record lookup for 'version.bitflu.workaround.ch' and
           will receive something such as: '1.0.52.0'
            1 = Unused
            0 = Major version
           52 = Minor version
            0 = Unused
         - Have a look at 'sub _VersionScan'
      * Blacklisted IPs are now expired after 1 hour.

     Kademlia:
      * Removed 'own' blacklisting code: The kademlia plugin will
        now use the Network-Blacklist API

     BitTorrent:
      * Include User-Agent string in Tracker requests
      * Do not schedule/throttle tracker writes (avoiding some timeout issues)

   
Version 0.52

     Core:
      * Implemented 'log': This command returns the last X log messages from bitflu's
        internal buffer
      * Bugfix/Workaround:
        Bitflu assumed that the system clock would never step backwards. This is true on systems
        that use ntpd/chrony/clockspeed to adjust clock drifts. But if something such as
        ntpdate is used we would run into much trouble. (The BitTorrent plugin could
        even cause bitflu to crash due to a division by zero).
        SetTime will now no longer accept timestamps from the past. This avoids
        Possible crashes but calculations (Download speed) will still suffer.

     BitTorrent:
      * Blacklist 'own' IP if detected (connecting to ourself doesn't make any sense)

     StorageVFS:
      * Implemented a simple 'allocator' to avoid fragmentation
      * Renamed default Storage-Directory names

     Core:
      * Moved the pause/resume commands into QueueMGR (This was implemented
        by the BitTorrent plugin itself)

     WebUI:
      * Added History dialog
      * Added a Notifications! button

     Cron:
      * Complain (via notify) if autoload failed for some reason


Version 0.51 

     BitTorrent:
      * create_torrent will not create torrents with piece-size < 32kb (would confuse uTorrent)
      * import_torrent: Skip incomplete files instead of panicing
      * Removed the old ranking-system with a fairer version
        (The old version discriminate fresh connections)
 
     StorageVFS:
      * Improved the 'cancel' command:
         -> Canceling an unfished/uncommitted downloads removes all traces
         -> Canceling a committed download moves it into $unshared_downloads

     WebUI:
      * Made the '/getfile' link relative to avoid problems behind an apache proxy
      * Added Include/Exclude buttons

Version 0.50 (Released: 20080531)
     BitTorrent:
      * Replaced some substr() calls with unpack().
        This is less ugly to read and might be somewhat faster.
      * Fixed some import_torrent bugs:
        - The imported data is now added to the uploaded counter to
          keep your ratio 'in-sync'
        - We'll disable autocommit/autocancel after importing
          data
      * Tracker-Plugin will now also bind to torrent_bind
      * Added create_torrent command.
         
     Kademlia:
      * Bugfix: Flush _knownbad each hour
      * Use torrent_bind (= Do not listen on all interfaces if set)

     Cron:
      * Bugfix: 100% completed downloads WITH excluded files would cause
                cron to do an endless-autocommit.
                Bitflu will now not try to autocommit files that have excluded
                files. (Wouldn't make much sense anyway...)

     Core:
      * bind() outgoing TCP connections to the same interface as the
        listening socket.
      * New configuration option: 'default_bind'
        bind outgoing/incoming connections to this interface if the
        plugin doesn't have its own *_bind value.
        default_bind is currently only used by the HTTP-Plugin.
      * New configuration option: history
          history = 1 : Use / update the download history (Default)
          history = 0 : Do not use or write to the history

     StorageFarabDb:
      * _WriteFile will now use rename() to do an atomic write

     StorageVFS:
      * New storage plugin: The old/current FarabDb-Storage plugin 
        needs a lengthy commit after a download has been finished because
        the whole 'stream' is stored within small chunks. This made it easy
        to ensure integrity (because it can use rename() to change a pieces
        state and it uses fsync() before moving a file into .done) but is very
        unhandy because commiting a download requires a LOT of space (it doubles
        the space usage). The new VFS plugin stores downloads the way it's done
        by 'all other' clients such as Azureus or uTorrent.
        Give it a try if you feel brave: (Note: This is alpha/beta code)
          1: Stop bitflu
          2: Edit .bitflu.config and set/replace 'storage = StorageVFS'
          3: Start bitflu
        The download list will now be empty because the VFS plugin is not
        'compatible' with FarabDb.
        -> Unfinished downloads are stored at ./workdir/unfinished/$SHA1
        -> Finished downloads are stored at ./workdir/finished/$NAME

        The plugin still has some known bugs/missing features:
        -> Moving/deleting files within ./workdir/(un)finished will cause
           bitflu to panic. You must 'cancel' a download before touching
           any files
        -> Canceling an unfinished download does not remove any files
        -> The plugin does not try to 'repair' a 'broken' download directory

        Btw: Switching back to the FarabDb plugin is easy: Just delete the
             'storage = ...' line and start bitflu again.


Version 0.45 (Released: 20080421)

     Core:
      * Implemented download-history:
         Bitflu will now remember what you've downloaded and refuses
         to download the same item twice.
         Use the 'history' command to view and edit the internal history

     Cron:
      * Implemented 'schedule' command:
         The schedule command can be used to change configuration values
         at a given time.
         An example:
          > schedule set upspeed 20 80@2200-2300 90@0100-0500
         This would cause bitflu to set the value of 'upspeed' to:
           80 from 22:00 until 23:00
           90 from 01:00 until 05:00
           20 otherwise (= Default value)
         Note that there is no 'weekday' support yet. So you cannot
         have a 'Sunday' rule. I'll implement it if there is demand for
         such an option.

     StorageFarabDb:
      * Added 'sprofile' command (Storage 'Profiler', used for performance debugging)
      * Fixed a typo that caused some unneeded printf() calls during startup
      * Moved Config-Proto from Bitflu::Configuration to StorageFarabDb

     Kademlia:
      * Save good nodes each 15 min. and boot from them
        at startup (if needed). The old behaviour was to boot using
        router.utorrent.com:6881 and router.bittorrent.com:6881.
        Both nodes will still be used if your routing table is
        empty. If you are running bitflu on a static ip, feel free to
        drop me a note and i'll add your ip/host to the hardcoded
        bootstrap list :-)

     Telnet:
      * Added 'l' command: This command outputs a compact
        (small screen) version of the 'vd' output
      * Log ip of connecting peer instead of the sockref on console

     WebUI:
      * Added Pause/Resume buttons to each download


Version 0.44 (Released: 20080229)

     Core:
      * New option: --daemon (fork into background after startup)
      * New configuration file option: logfile
      * Check 'APIVERSION' while loading plugins

     StorageFarabDb:
      * Dump bitfield on exit and slurp it while starting up.
        Doing this improves startup time while running on
        filesystems with slow metadata performance (Such as Ext3)
      * Executing 'files 0 list' triggered a panic, this has been
        fixed.
      * Do not try to 'fix up' the StorageId, this caused certain
        plugins to panic

     BitTorrent:
      * Keep one PPL-Piece until it's done. This helps to
        'bootstrap' a torrent.

     Kademlia:
      * Removed 'kademlia_enabled' setting. You can disable
        the kademlia plugin via 'pluginexclude'

     AdminTelnet:
      * You can now specify multiple commands on a line using ';', Example:
         bitflu> config show upspeed ; netstat
      * Support for pseudo-pipes and grep, Example:
         bitflu> files 1234567890abcdef1234567890abcdef12345678 list | grep Foo

     WebUI:
      * Do not use absolute links, making the WebUI useable behind an Apache-Proxy
      * Display 'ratio'


Version 0.43 (Released: 20080117)

     BitTorrent:
      * Support for MAGNET links
      * Added 'pause' and 'resume' commands.
      * Only keep needed information form the torrent in memory
      * Removed partial FastPeers support: Mainline dropped support in
        version 6.x (also known as uTorrent)
      * Delay ReleasePiece calls after receiving a CHOKE message.
        This helps to work around some obscure uTorrent UNCHOKE->CHOKE->UNCHOKE
        tactic.
      * Bugfix: import_torrent can now correctly slurp torrents
                that include zero-sized files.
        
     WebUI:
      * Added a (bare-bones) WebUI: http://127.0.0.1:4081/

     StorageFarabDb:
      * Added 'files .. include' and 'files .. exclude' (for selective downloads!)
      * Fixed 'files .. list' percent calculation to be more accurate :-)
      * Replaced the 'pcommit' command with 'files queue_id commit 1 2 3'
      * Display percentage while verifing storage
      * Do not cache more than 256 bytes per setting (Caching _torrent
        doesn't make much sense)
      * Cache Free/Inwork/Done data using a bitfield
      * (Try to) fsync() file before moving it to .done

     Core:
      * API-Change: Changed how ->ExecuteCommand works:
                    Plugins can now return 'leftovers' (SCRAP) that we'll
                    pass to the remaining plugins.
                    This makes it possible pass torrent and http-urls to
                    a single 'load' command.
      * Added 'pluginexclude' setting:
         pluginexclude = 10_AdminTelnet.pm;99_Cron.pm
        would disable the telnet + cron plugin


Version 0.42 (Released: 20071226)

     Core:
      * Enhancement: Run out-of-the-box on Perl 5.10 by using Digest::SHA if
                     installed (and fallback to Digest::SHA1 if it isn't)
      * Bugfix: Check for EWOULDBLOCK and EAGAIN if syswrite() failed.
                This fix makes bitflu a much better uploader :-)
      * Bugfix: Reject incoming connection if $sock->peername; fails
      * API-Change: Callbacks are now registered while creating the socket.
      * API-Change: Throttle is depricated. Use WriteDataNow() instead.
      * Many netiolib changes (This release includes version 20071220_1)
      * Use /dev/null instead of /dev/zero to test file descriptors.
      * Try to read() multiple times from a socket while in _IOread();

     BitTorrent:
      * Bugfix: Release locked pieces on unchoke.
      * Bugfix: Do not crash if torrent has an empty info=>{} hash
      * Removed torrent_huntpriority and torrent_slowspread settings.
      * Added torrent_upslots setting. (Configures how many peers can be unchoked)
      * Run an unchoke round each 30sec+skew (not each 20sec like 0.41 did), optimistinc
        unchoking has also been implemented (we are unchoking 1 GLOBAL peer)
      * Rewrote mainloop: The 'GarbageCollector' runs now each second but does only
        work on a small subset of peers.
      * Try (even more) to avoid calls to $self->Hunt; (they can be very expensive)
      * Do not accept more than 30 peers per ut_pex message.
      * DebugPeer (the 'x' command) does now display the name (+ version) of some
        well known clients such as uTorrent, Azureus, BitComet.. etc..
      * Trackerblacklist matches are now caseINsensitive

     AdminTelnet:
      * Removed the flags column and replaced it by colors + text
      * Added command 'details'

     Kademlia:
      * Do not accept malformed kademlia nodes ($port == 1) in response
        to get_peers/find_nodes as this will just trigger a bugcheck/panic.

     StorageFarabDb:
      * Check storage directory on first ->OpenStorage call
      * Security fix: A malicious .torrent could have caused bitflu to
                      either append data to existing files or create
                      new files (overwriting files was not possible) 'outside'
                      it's own workdir while committing the download.
                      The storage driver will now try to sanitize filenames
                      and refuses to append data to existing files.
                      Well.. fixing this was on my todo list for 0.40 but i forgot
                      to implement it...
                      Remember: Always run bitflu inside a chroot jail ;-)

        


Version 0.41 (Released: 20071213)

     Core:
      * Added 'pcommit' command
      * Mark broken commits wit a 'INCOMPLETE_' prefix
      * Advertise MAX_OUTSTANDING_REQUESTS via EPROTO-Handshake
      * Added 'useradmin' command (Authentication)
      * Fixed some perl warnings and adjusted loglevel
      * Bugfix: StorageFarabDb: OpenStorage does now cache (and more important) share
                the storage object globally. This fixes a rare 'race condition'.

     BitTorrent:
      * Added Kademlia Support
      * Downloading a .torrent file using the 'load' command will now
        trigger an auto-import (= Bitflu will start load the torrent itself)
      * Implemented PPL-Hunting: Bitflu will now try to get some complete pieces ASAP


Version 0.40
      * This is a complete rewrite

