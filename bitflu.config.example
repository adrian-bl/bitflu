# Example configuration file for Bitflu
#
#
# Cancel finished downloads after reaching a ratio of 1.5
autocancel                = 1.5

# 'commit' completed downloads
autocommit                = 1

# Directory to watch for new torrent files
autoload_dir              = ./workdir/autoload

# How often shall we scan autoload_dir? Default = each 300 seconds
autoload_scan             = 300

# Bitflu will check if there is a new release unless this is set to 0
checkversion              = 1243077729

# Finished/Commmited downloads go here
completed_downloads       = ./workdir/seeding

# Remember downloaded files (See: 'help history')
history                   = 1

# The http plugin will try to detect .torrent
# files and loads them itself
http_autoloadtorrent      = 1

# How many concurrent http downloads can be running
http_maxthreads           = 10

# Directory that holds incomplete/unfinished downloads
incomplete_downloads      = ./workdir/unfinished

# Use IPv6?
ipv6                      = 1

# Set this to some (random) value if you would like to
# keep your kademlia ID (can be handy if you have a static
  IP). The default is to re-calculate a new ID on each startup
kademlia_idseed           = 0

# Logfile
logfile                   = 

# Set the loglevel: 5 is normal, 0 almost silent and 999 debug
loglevel                  = 5

# Directory to scan for plugins
plugindir                 = ./plugins

# A list of disabled/excluded plugins
pluginexclude             = 

# Bitflu can set its own 'nice' level if started as root
renice                    = 8

# Storage plugin to use. Do not change unless you know what
# you are doing!
storage                   = StorageVFS

# The telnet plugin will bind to this IP:
telnet_bind               = 127.0.0.1

# Telnet plugin history size (up,down keys)
telnet_maxhist            = 20

# Port to use for the telnet plugin
telnet_port               = 4001

# Name of the tempdir within workdir
tempdir                   = tmp

# The BitTorrent plugin will bind to this IP (default 0=all interfaces)
torrent_bind              = 0

# 'GarbageCollector' priority
torrent_gcpriority        = 5

# Directory that import_torrent will use
torrent_importdir         = ./workdir/import

# How many peers are allowed per torrent?
torrent_maxpeers          = 80

# Never pipeline more than 6 requests per peer
torrent_maxreq            = 6

# Port to use for BitTorrent
torrent_port              = 6688

# Limit total number of BitTorrent peers to 400
torrent_totalpeers        = 400

# If set to 1, bitflu will try to reach http-only trackers
# via UDP. Setting this to '0' disables this auto-guessing
torrent_tracker_autoudp   = 1

# UDP port for 'incoming' udp replies
# (no need to open this on most firewalls)
torrent_tracker_udpport   = 6689

# A regexp: Bitflu will skip all matching tracker URLs
torrent_trackerblacklist  = 

# How many peers can be unchoked
torrent_upslots           = 10

# Finished but unshared downloads go here:
unshared_downloads        = ./workdir/removed

# Upload limit (kb/s)
upspeed                   = 35

# Download limit (kb/s). A value of '0' means 'no limit'
# Note: Downloadthrottling is not perfect and could become
# a cpu-hog if you have way too many open connections!
downspeed                 = 0

# Should bitflu pre-allocate space using the fallocate() syscall?
# This avoids file fragmentation but uses up more space (no sparsefiles anymore)
# and is not supported on all filesystems. (ext4 and btrfs support it)
# Note: fallocate() isn't so fast on btrfs and might stall bitflu for a few seconds
vfs_use_fallocate         = 0

# If set to non-zero, bitflu will pause (sparsefile-)downloads
# if the free disk space drops below this amount.
# Bitflu will also re-start the downloads if enough space
# becomes available
min_free_mb               = 0


# The HTTP-UI will bind to this IP:
webgui_bind               = 127.0.0.1

# Port to use for the HTTP-UI
webgui_port               = 4081

# Bitflus 'root directory'
workdir                   = ./workdir


# Change uid/gid after startup (if started as root, needed for chroot)
# runas_uid =
# runas_gid =

# chroot() into this directory after startup (read README.txt !)
# chroot =

# chdir into this directory after startup
# chdir =
